/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var peat = ee.Image("users/mjlara71/AlbersPeatMap_v3Final"),
    AKbound = ee.FeatureCollection("users/mjlara71/AK_projected_bound");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

/*
////////////////////////////////////////////////////////////////////////////////////////
                             Alaska Peatland Map (2019-2021)
/////////////////////////////////////////////////////////////////////////////////////////
Mark J Lara, Roger Michaelides, Duncan Anderson, Wenqu Chen, Emma Hall, Caroline Ludden,
Aiden Schore, Umakant Mishra, & Sarah Scott. (2023). Alaska Peatland Map (2019-2021). 
Arctic Data Center. doi:10.18739/A2NK3667M.

Peatlands cover 3% of the global land surface, yet store 25% of the worldâ€™s soil organic carbon. 
These organic-rich soils are widespread across permafrost regions, representing nearly 18% of land 
surface and storing between 500 and 600 petagrams of carbon (PgC). Peat (i.e., partially decomposed 
thick organic layers) accumulates due to the imbalance between plant production and decomposition 
often within saturated, nutrient deficient, and acidic soils, which limit decomposition. As warmer 
and drier conditions become more prevalent across northern ecosystems, the vulnerability of peatland 
oils may increase with the susceptibility of peat-fire ignitions, yet the distribution of peatlands 
across Alaska remains uncertain. Here we develop a new high-resolution (20 meter (m) resolution) 
wall-to-wall ~1.5 million square kilometer (km2) peatland map of Alaska, using a combination of Sentinel-1 
(Dual-polarized Synthetic Aperture Radar), Sentinel-2 (Multi-Spectral Imager), and derivatives from the 
Arctic Digital Elevation Model (ArcticDEM). Machine learning classifiers were trained and tested using peat cores, 
ground observations, and sub-meter resolution image interpretation, which was spatially constrained by a 
peatland suitability model that described the extent of terrain suitable for peat accumulation. This 
product identifies peatlands in Polar, Boreal, and Maritime ecoregions in Alaska to cover 26,842 
(4.6%), 69,783 (10.4%), and 13,506 (5.3%) km2, respectively.

*/

// BASE MAP SETTING

// Define base map style.
var basemapStyle = [
   {stylers: [{saturation: 0}, {lightness: 0}]
  }
];

// Set basemap options.
Map.setOptions('Satellite', {
    Satellite: basemapStyle
});

//Visualization
var palettes = require('users/gena/packages:palettes');
var palette = palettes.cmocean.Haline[7];

// Specify the class value to be made transparent (e.g., class 3)
var classToMask = 0;

// Create a mask where the unwanted class is set to 0 and others to 1
var mask = peat.neq(classToMask);

// Apply the mask to the classified image
var maskedClassifiedImage = peat.updateMask(mask);
//blue is no peat; yellow is moist peat; and green is wet peat
Map.addLayer(maskedClassifiedImage.clip(AKbound), {min:0, max:2, palette: palette}, "AK Peatland Map")
Map.setCenter(-164.1893, 62.9552, 10)



/*
The following code represents the fundamental steps used to fuse/stack/filter 
Sentinel 1 and 2 datasets and the classification procedure that followed across
various ecoregions of AK. 
/////////////////////////////////////////////////////////////////////////
//                       Datafusion Classification                     //
/////////////////////////////////////////////////////////////////////////


var slope_correction1 = function (collection,
                                 options
                                 ){

    // set defaults if undefined options
    options = options || {};
    var model = options.model || 'volume';
    var elevation = options.elevation || ee.Image('USGS/SRTMGL1_003');
    var buffer = options.buffer || 0;

    // we need a 90 degree in radians image for a couple of calculations
    var ninetyRad = ee.Image.constant(90).multiply(Math.PI/180);

    // Volumetric Model Hoekman 1990
    function _volume_model(theta_iRad, alpha_rRad){

      var nominator = (ninetyRad.subtract(theta_iRad).add(alpha_rRad)).tan();
      var denominator = (ninetyRad.subtract(theta_iRad)).tan();
      return nominator.divide(denominator);
    }

    // surface model Ulander et al. 1996
    function _surface_model(theta_iRad, alpha_rRad, alpha_azRad){

      var nominator = (ninetyRad.subtract(theta_iRad)).cos();
      var denominator = alpha_azRad.cos()
        .multiply((ninetyRad.subtract(theta_iRad).add(alpha_rRad)).cos());
      return nominator.divide(denominator);
    }

    // buffer function (thanks Noel)
    function _erode(img, distance) {

      var d = (img.not().unmask(1)
          .fastDistanceTransform(30).sqrt()
          .multiply(ee.Image.pixelArea().sqrt()));

      return img.updateMask(d.gt(distance));
    }

    // calculate masks
    function _masking(alpha_rRad, theta_iRad, proj, buffer){

        // layover, where slope > radar viewing angle
        var layover = alpha_rRad.lt(theta_iRad).rename('layover');

        // shadow
        var shadow = alpha_rRad.gt(ee.Image.constant(-1).multiply(ninetyRad.subtract(theta_iRad))).rename('shadow');

        // combine layover and shadow
        var mask = layover.and(shadow);

        // add buffer to final mask
        if (buffer > 0)
            mask = _erode(mask, buffer);

        return mask.rename('no_data_mask');
   }

    function _correct(image){

        // get image geometry and projection
        var geom = image.geometry();
        var proj = image.select(1).projection();

        // get look direction angle
        var heading = (ee.Terrain.aspect(
            image.select('angle')).reduceRegion(ee.Reducer.mean(), geom, 1000).get('aspect')
            );

        // Sigma0 to Power of input image
        var sigma0Pow = ee.Image.constant(10).pow(image.divide(10.0));

        // Radar geometry
        var theta_iRad = image.select('angle').multiply(Math.PI/180).clip(geom);
        var phi_iRad = ee.Image.constant(heading).multiply(Math.PI/180);

        // Terrain geometry
        var alpha_sRad = ee.Terrain.slope(elevation).select('slope')
            .multiply(Math.PI/180).setDefaultProjection(proj).clip(geom);
        var phi_sRad = ee.Terrain.aspect(elevation).select('aspect')
            .multiply(Math.PI/180).setDefaultProjection(proj).clip(geom);

        // Model geometry

        //reduce to 3 angle
        var phi_rRad = phi_iRad.subtract(phi_sRad);

        // slope steepness in range
        var alpha_rRad = (alpha_sRad.tan().multiply(phi_rRad.cos())).atan();

        // slope steepness in azimuth
        var alpha_azRad = (alpha_sRad.tan().multiply(phi_rRad.sin())).atan();

        // Gamma_nought
        var gamma0 = sigma0Pow .divide(theta_iRad.cos());

               // models
        if (model == 'volume')
          var corrModel = _volume_model(theta_iRad, alpha_rRad);

        if (model == 'surface')
          var corrModel = _surface_model(theta_iRad, alpha_rRad, alpha_azRad);

        if (model == 'direct')
          var corrModel = _direct_model(theta_iRad, alpha_rRad, alpha_azRad);

        // apply model to derive gamma0_flat
        var gamma0_flat = gamma0.divide(corrModel);

        // transform to dB-scale
        var gamma0_flatDB = (ee.Image.constant(10)
            .multiply(gamma0_flat.log10()).select(['VV', 'VH'])
            );

        // get Layover/Shadow mask
        var mask = _masking(alpha_rRad, theta_iRad, proj, buffer);

        // return gamma_flat plus mask
        return gamma0_flatDB.addBands(mask).copyProperties(image);


    }

    // run correction function and return corrected collection
    return collection.map(_correct);

};



//var slope_lib = require('users/andreasvollrath/radar:slope_correction_lib.js');

//----------------------------------------------------------------------------------------------------
// AOI
var start = '2020-07-21';
var end = '2020-08-15';
//var summer = ee.Filter.dayOfYear(181,214);//Jun15_166-sept1_244, July1_182
//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
// Original S1 Collection
var s1_collection = ee.ImageCollection('COPERNICUS/S1_GRD')
    .filterBounds(AKbound)
    .filterDate(start, end)
  //  .filter(summer)
    .filter(ee.Filter.and(
      ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'),
      ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'),
      ee.Filter.eq('instrumentMode', 'IW')
      ));
//print(s1_collection)

// apply loaded lib function on collection (and get back corrected collection with volume model)
var volume = slope_correction1(
    s1_collection,
    // those are optional and need ot be given as a dict
    {'model': 'volume',
    'elevation': ee.Image(USGS),
    'buffer': 75      // buffer in meter
    }
);

// apply loaded lib function on collection (and get back corrected collection with surface model)
var surface = slope_correction1(
    s1_collection,
    // those are optional and need ot be given as a dict
    {'model': 'surface',
     'elevation': ee.Image(USGS),
     'buffer': 75       // buffer in meter
    }
);
//----------------------------------------------------------------------------------------------------

// see the original bands
//print(s1_collection.first(), 'First image of the original S1 collection')
// see the new bands
//print(volume.first(), 'First image of the corrected S1 collection');


//----------------------------------------------------------------------------------------------------
// plotting
var image_uncorrected = s1_collection.median()//mosaic()//.clip(geometry);

// we use this workaround on quality mosaic, to avoid the half-transparent issue
var volume_corrected = volume.median()//('no_data_mask')//.clip(geometry);
var surface_corrected = surface.median()//qualityMosaic('no_data_mask')//.clip(geometry);


// create ratio for RGB, add to image and apply the no-data mask
var ratio_uncorrected = image_uncorrected.select('VV')
                        .subtract(image_uncorrected.select('VH')).rename('ratio').clip(result).clip(NSBound);
var image_uncorrected = image_uncorrected.addBands(ratio_uncorrected).clip(result).clip(NSBound);

var ratio_volume = volume_corrected.select('VV')
                        .subtract(volume_corrected.select('VH')).rename('ratio').clip(result).clip(NSBound);
var image_volume = volume_corrected.addBands(ratio_volume)
                        .updateMask(volume_corrected.select('no_data_mask')).clip(result).clip(NSBound);

var ratio_surface = surface_corrected.select('VV')
                        .subtract(surface_corrected.select('VH')).rename('ratio').clip(result).clip(NSBound);
var image_surface = surface_corrected.addBands(ratio_surface)
                        .updateMask(surface_corrected.select('no_data_mask')).clip(result).clip(NSBound);

// plot single layer and RGB
// Map.addLayer(image_surface.select(['VV', 'VH', 'ratio']), {min:[-18, -25, 1], max:[0, -5, 12]}, 'Surface Corrected RGB');
// Map.addLayer(image_volume.select(['VV', 'VH', 'ratio']), {min:[-18, -25, 1], max:[0, -5, 12]}, 'Volume Corrected RGB');
// Map.addLayer(image_uncorrected.select(['VV', 'VH', 'ratio']), {min:[-18, -25, 1], max:[0, -5, 12]}, 'Uncorrected RGB');


var bands = ['VH','VV', 'B5', 'B6', 'B7', 'B8', 'B11', 'B12'];

var TAGEE = require('users/joselucassafanelli/TAGEE:TAGEE-functions');

var demSRTM = ArcDEM.clip(AKbound).rename('DEM');

// Smoothing filter
var gaussianFilter = ee.Kernel.gaussian({
  radius: 3, sigma: 2, units: 'pixels', normalize: true
});

// Smoothing the DEM with the gaussian kernel.
var demSRTM = demSRTM.convolve(gaussianFilter).resample("bilinear");

// Terrain analysis

var DEMAttributes = TAGEE.terrainAnalysis(TAGEE, demSRTM, result)//.updateMask(waterMask);
//print(DEMAttributes.bandNames(), 'Parameters of Terrain');
//Map.addLayer(DEMAttributes.select('Slope'),{})

// Visualization

var TopoBands = ['Elevation', 'Slope', 'Aspect', 'Northness', 'Eastness', 'HorizontalCurvature', 'VerticalCurvature']
// //topographical attributes
// var Elev = TAGEE.makeVisualization(DEMAttributes, 'Elevation', 'level13', tundraBound, 'rainbow');
// var Slope = TAGEE.makeVisualization(DEMAttributes, 'Slope', 'level13', tundraBound, 'rainbow');
// var Aspect = TAGEE.makeVisualization(DEMAttributes, 'Aspect', 'level13', tundraBound, 'rainbow');
// var Hillshade = TAGEE.makeVisualization(DEMAttributes, 'Hillshade', 'level13', tundraBound, 'rainbow');
// var Northness = TAGEE.makeVisualization(DEMAttributes, 'Northness', 'level13', tundraBound, 'rainbow');
// var Eastness = TAGEE.makeVisualization(DEMAttributes, 'Eastness', 'level13', tundraBound, 'rainbow');
// var HorCur = TAGEE.makeVisualization(DEMAttributes, 'HorizontalCurvature', 'level13', tundraBound, 'rainbow');
// var VertCur = TAGEE.makeVisualization(DEMAttributes, 'VerticalCurvature', 'level13', tundraBound, 'rainbow');
// var MeanCur = TAGEE.makeVisualization(DEMAttributes, 'MeanCurvature', 'level13', tundraBound, 'rainbow');
// var GausCur = TAGEE.makeVisualization(DEMAttributes, 'GuassianCurvature', 'level13', tundraBound, 'rainbow');
// var MinCur = TAGEE.makeVisualization(DEMAttributes, 'MinimalCurvature', 'level13', tundraBound, 'rainbow');
// var MaxCur = TAGEE.makeVisualization(DEMAttributes, 'MaximalCurvature', 'level13',tundraBound, 'rainbow');
// var Shape = TAGEE.makeVisualization(DEMAttributes, 'ShapeIndex', 'level13', tundraBound, 'rainbow');


// var SARProj = im1.projection()
// var SARProj1 = im1.reproject({crs: SARProj, scale:20})
// var SARProj3 = im3.reproject({crs: SARProj, scale:20})


function maskS2clouds(image) {
  var qa = image.select('QA60');
  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask).divide(10000);
}

var Sent2 = ee.ImageCollection('COPERNICUS/S2_SR')
                  .filterDate('2019-07-01', '2021-08-30')
                  .filter(ee.Filter.dayOfYear(182,258))
                  // Pre-filter to get less cloudy granules.
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',15))
                  .map(maskS2clouds).median().clip(result).clip(NSBound);

// var SentProj = Sent2.reproject({crs: SARProj, scale: 20});


var visualization = {
  min: -30.0,
  max: 0,
  bands: ['VH', 'VV'],
};
var visualization1 = {
  min: 0.0,
  max: .3,
  bands: ['B11', 'B6', 'B4'],

};
var visualization2 = {
  min: 0.0,
  max: .1,
  bands: ['B4', 'B3', 'B2'],

};


// // Map.addLayer(vizVC, {}, 'MaxCurvature');
// var sent1 = Map.addLayer(im1.addBands(im3).addBands(im1), {min: -25, max: 0}, 'SAR');
//     sent1.setShown(0)

var sent2a = Map.addLayer(Sent2, visualization1, 'SWIR');
    sent2a.setShown(0)
    
var sent2b = Map.addLayer(Sent2, visualization2, 'RGB');
    sent2b.setShown(0)
    
//var stack = ee.Image(im3.addBands(im1).addBands(Sent2).select(bands).addBands(DEMAttributes).mask(waterMask))//.clip(geometry2))
//var stack = ee.Image(Sent2.select(bands).addBands(DEMAttributes).mask(waterMask))//.clip(geometry2))
//var stack = ee.Image(im3.addBands(im1).addBands(DEMAttributes).mask(waterMask))//.clip(geometry2)
var stack_tundra = image_surface.select(['VV', 'VH', 'ratio']).addBands(Sent2).select(bands).addBands(DEMAttributes.select(TopoBands)).clip(NSBound)

//var training_data = bog_new.merge(bog_old).merge(shrubland).merge(water).merge(forest);
//var training_data = fen1.merge(bog_new).merge(Basins).merge(shrubland).merge(water).merge(forest).merge(sand).merge(upland).filterBounds(geometry2);
var training_data = sand23.merge(wetsand23).merge(Shrub23).merge(wetpeat23ed).merge(moistpeat23).merge(water23).merge(impervious23).merge(heath23).filterBounds(geometry2);



// Convert the feature collection to an image where each pixel value represents a polygon ID
var polygonImage = impervious23.reduceToImage({
  properties: ['peat'], // Property to use as pixel values
  reducer: ee.Reducer.first() // Take the first polygon ID in case multiple polygons intersect a pixel
});

// Count the number of pixels under polygons within the ROI
var pixelCount = polygonImage.reduceRegion({
  reducer: ee.Reducer.count(), // Use the count reducer
  geometry: tundra,
  scale: 20,
  maxPixels: 99999999999999// Adjust the scale as needed
});

// Print the pixel count
print("Pixel count under polygons:", pixelCount);



// Use these bands for prediction.



/////////////////////////////////////////////////////////////////////////
//                       Image Classification                          //
/////////////////////////////////////////////////////////////////////////

var image1 = stack_tundra;

//Map.addLayer(borealBound)

// function getH20(classification){
//   var classes = classification.select('B1');
//   //var nir = image.select('B4');
//   var openwater = classification.eq(1);
//   var mask = classification.mask(openwater);
//   return mask;
// }

var training1 = image1.sampleRegions({
  collection: training_data,
  properties: ['peat'],
  scale: 100  // should reflect the scale of your imagery
});

// Create an SVM classifier with custom parameters.
var classifier1 = ee.Classifier.libsvm({
  kernelType: 'RBF',
  gamma: 0.5,
  cost: 10
});

// // Create an SVM classifier with custom parameters.
// var classifier2 = ee.Classifier.smileGradientTreeBoost({
//   numberOfTrees: 300,
//   seed: 1
// });

// Train the classifier.
var trained1 = classifier1.train(training1, 'peat', bands);

// Classify the images.
var classified1 = image1.classify(trained1);

// Create a palette to display one classification.
var palette =["red","yellow",'#CDDC39', 'blue', '#DCEDC8',
              '#0033FF', '#B71C1C', '#EF9A9A'];
//https://htmlcolorcodes.com/color-chart/


//Map.addLayer(classified1, {min: 0, max: 3, palette: palette}, 'Peat_Tundra');
// var class2 = Map.addLayer(classified1, {min: 0, max: 8, palette: palette}, 'Peat_Tundra'); 
// class2.setShown(1)

//var reclass = classified1.remap([1,2,3,6],[1,2,3,4]);
var reclass = classified1.remap([1,2],[1,2]);
var Organicproj = reclass.projection();
var Organic = reclass.reproject({crs: Organicproj, scale:10})

var Peat = Map.addLayer(Organic, {min: 1, max: 2, palette: ['4DB6AC', 'AED581']}, 'Peat_Tundra'); 
Peat.setShown(1)

// function getSaturatedPeat(classification){
//   var peat1 = classification.eq(1);
//   var peat2 = classification.eq(2);
//   var peat = peat1.add(peat2);
//   var mask = classification.mask(peat);
//   return mask;
// }

// function getMoistPeat(classification){
//   var peat = classification.eq(3);
//   var mask = classification.mask(peat);
//   return mask;
// }

// function getWater(classification){
//   var peat = classification.eq(4);
//   var mask = classification.mask(peat);
//   return mask;
// }

*/


